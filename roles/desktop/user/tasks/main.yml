# vim: set foldmethod=marker:
---
# Clone custom-oh-my-zsh {{{
- name: Ensure MyStuff directory exists
  tags: [zsh]
  file:
    path: ~/Development/MyStuff
    state: directory
- name: Clone custom-oh-my-zsh
  tags: [zsh]
  git:
    repo: git@github.com:jcmuller/custom-oh-my-zsh.git
    dest: ~/Development/MyStuff/custom-oh-my-zsh
    accept_hostkey: true
    update: true
# }}}
# Install yadm {{{
- name: Clone yadm
  tags: [yadm]
  git:
    repo: https://github.com/TheLocehiliosan/yadm.git
    dest: ~/.yadm-src
- name: Ensure bin exists
  tags: [yadm, gopass]
  file:
    dest: ~/bin
    mode: 0755
    state: directory
- name: Install yadm
  tags: [yadm]
  file:
    src: ~/.yadm-src/yadm
    dest: ~/bin/yadm
    state: link
    mode: 0755
- name: Yadm get config
  command:
    cmd: ~/bin/yadm clone git@github.com:jcmuller/dotrcs.git
    creates: ~/.config/yadm/repo.git
# }}}
# {{{ Install gopasspwd
- name: Copy gopasspwd
  tags: [gopass]
  copy:
    src: gopasspwd
    dest: ~/bin
    mode: 0755
# }}}
# {{{ Install antigen
- name: Antigen
  tags: [antigen, zsh]
  git:
    repo: https://github.com/zsh-users/antigen
    dest: ~/.antigen-src
# }}}
- name: Install asdf #{{{
  tags: [asdf]
  git:
    repo: https://github.com/asdf-vm/asdf.git
    dest: ~/.asdf
    version: "{{asdf.version}}"

- name: Install asdf plugins
  tags: [asdf, asdf-plugins]
  shell: |
    . ~/.asdf/asdf.sh
    asdf plugin add {{item.name}}
  args:
    executable: /bin/bash
    creates: "~/.asdf/plugins/{{item.name}}"
  with_items: "{{asdf.plugins}}"

- name: Install versions
  tags: [asdf, asdf-plugins]
  shell: |
    . ~/.asdf/asdf.sh
    asdf install {{item.name}} {{item.version}}
    asdf global {{item.name}} {{item.version}}
    asdf reshim
  args:
    executable: /bin/bash
    creates: "~/.asdf/installs/{{item.name}}/{{item.version}}"
  with_items: "{{asdf.plugins}}"
#}}}
- name: Install goobook # {{{
  tags: [mutt, goobook]
  pip:
    name: goobook
# }}}
# Helm plugins {{{
- name: Install helm plugins
  tags: [helm-plugins]
  args:
    executable: /bin/bash
    creates: ~/.local/share/helm/plugins/helm-diff/
  shell: |
    . ~/.asdf/asdf.sh
    helm plugin install {{ item.source }}
  with_items: "{{ helm.plugins }}"
# }}}
- name: Ensure zsh is installed # {{{
  become: true
  tags: [zsh]
  apt:
    name: zsh
# }}}
- name: Set shell to zsh # {{{
  tags: [zsh]
  become: true
  user:
    name: "{{ user.name }}"
    append: true
    shell: /usr/bin/zsh
# }}}
- name: Install logrotate config for xsession-errors # {{{
  tags: [xsession]
  become: true
  copy:
    src: xsession-errors
    dest: /etc/logrotate.d/
    mode: 0644
# }}}
- name: Install version_manager_shell_string # {{{
  tags: [version_manager_shell_string]
  become: true
  become_user: root
  get_url:
    url: https://github.com/jcmuller/version_manager_shell_string/releases/download/{{ version_manager_shell_string.version }}/version_manager_shell_string-linux
    dest: /usr/local/bin/version_manager_shell_string
    mode: 0755
    force: true
# }}}
# Install gopass {{{
- name: Set gopass url
  tags: [gopass]
  set_fact:
    gopass_url: https://github.com/gopasspw/gopass/releases/download/v{{ gopass.version }}/gopass-{{ gopass.version }}-linux-amd64.tar.gz

- name: Create gopass install dir
  tags: [gopass]
  file: path=/tmp/gopass state=directory

- name: Unpack gopass
  tags: [gopass]
  unarchive:
    src: "{{ gopass_url }}"
    dest: /tmp/gopass/
    remote_src: true

- name: Install gopass
  tags: [gopass]
  become: true
  copy:
    src: /tmp/gopass/gopass
    remote_src: true
    dest: /usr/local/bin/gopass
    owner: root
    group: root
    mode: 0755

- name: Install gopass completion
  tags: [gopass]
  become: true
  copy:
    src: /tmp/gopass/zsh.completion
    remote_src: true
    dest: /usr/local/share/zsh/site-functions/_gopass
    owner: root
    group: root

- name: Remove gopass installation files
  tags: [gopass]
  file:
    path: /tmp/gopass
    state: absent
# }}}
- name: Install summon # {{{
  tags: summon
  become: true
  unarchive:
    src: https://github.com/cyberark/summon/releases/download/{{ summon.version }}/summon-linux-amd64.tar.gz
    dest: /usr/local/bin
    remote_src: true

- name: Ensure summon lib directory exists
  tags: summon
  become: true
  file:
    dest: /usr/local/lib/summon
    state: directory
    mode: 0755

- name: Add gopass for summon
  tags: [summon, gopasspwd]
  become: true
  copy:
    src: gopasspwd
    dest: /usr/local/lib/summon/gopass
    mode: 0755
# }}}
- name: Install user systemctl units # {{{
  tags: systemctl
  file:
    dest: ~/.config/systemd/user/
    state: directory
    mode: 0755

- name: Install user systemctl
  tags: systemctl
  copy:
    src: "{{item}}"
    dest: ~/.config/systemd/user/
    owner: "{{user.name}}"
    group: "{{user.group}}"
    mode: 0644
  with_items:
    - systemd/dunst.service
    - systemd/offlineimap@.service

- name: Install
  tags: systemctl
  shell: |
    systemctl --user enable offlineimap@Personal.service
    systemctl --user enable dunst.service
# }}}
# {{{ Install browserpass-native
- name: Check out browserpass
  tags: [browserpass]
  git:
    repo: git@github.com:browserpass/browserpass-native.git
    dest: ~/Development/OSS/browserpass-native
    version: "{{browserpass.version}}"

- name: Configure browserpass
  tags: [browserpass]
  make:
    target: configure
    chdir: ~/Development/OSS/browserpass-native

- name: Build browserpass
  tags: [browserpass]
  args:
    executable: /bin/bash
    chdir: ~/Development/OSS/browserpass-native
  shell: |
    source ~/.asdf/asdf.sh
    asdf reshim
    make

- name: Install browserpass
  tags: [browserpass]
  become: true
  make:
    target: "{{item}}"
    chdir: ~{{user.name}}/Development/OSS/browserpass-native
  with_items:
    - install
    - hosts-firefox
# }}}
- name: Ensure dunst cache dir exists # {{{
  tags: dunst
  file:
    dest: ~/.cache/dunst
    state: directory
    mode: 0755
# }}}
- name: Make rofi a dmenu provider # {{{
  tags: [dmenu, rofi]
  become: true
  args:
    executable: /bin/bash
  shell: |
    mv /usr/bin/dmenu /usr/bin/dmenu_orig
    ln -s /usr/bin/rofi /usr/bin/dmenu
# }}}
- name: Download qutebrowser # {{{
  tags: qutebrowser
  git:
    repo: git@github.com:qutebrowser/qutebrowser.git
    dest: ~/Development/OSS/qutebrowser
    accept_hostkey: true
    update: true
    version: "{{qutebrowser.version}}"

- name: Install it
  tags: qutebrowser
  become: true
  command: /usr/bin/python3 scripts/mkvenv.py --venv-dir=.venv-{{qutebrowser.version}}
  args:
    chdir: ~{{user.name}}/Development/OSS/qutebrowser

- name: Symlink qutebrowser
  tags: qutebrowser
  become: true
  file:
    src: ~{{user.name}}/Development/OSS/qutebrowser/.venv-{{qutebrowser.version}}/bin/qutebrowser
    dest: /usr/local/bin/qutebrowser-{{qutebrowser.version}}
    state: link

- name: Install dictionaries
  tags: qutebrowser
  args:
    executable: /bin/bash
    chdir: ~/Development/OSS/qutebrowser
  shell: |
    scripts/dictcli.py update
    scripts/dictcli.py install en-US
    scripts/dictcli.py install es-ES

- name: Download qpm
  tags: [qutebrowser, qpm]
  git:
    repo: git@github.com:pvsr/qpm.git
    dest: ~/Development/OSS/qpm
    accept_hostkey: true
    update: true

- name: Install it
  tags: [qutebrowser, qpm]
  become: true
  args:
    executable: /bin/bash
    chdir: ~{{user.name}}/Development/OSS/qpm
  shell: |
    python3 setup.py install
# }}}
# {{{ tmux
- name: Download tmux
  tags: tmux
  git:
    repo: git@github.com:tmux/tmux.git
    dest: ~/Development/OSS/tmux
    accept_hostkey: true
    update: true
    version: "{{tmux.version}}"

- name: Configure tmux
  tags: tmux
  args:
    executable: /bin/bash
    chdir: ~/Development/OSS/tmux
  shell: |
    sh autogen.sh
    ./configure

- name: Build tmux
  tags: [tmux, tmux-build]
  make:
    chdir: ~/Development/OSS/tmux

- name: Install tmux
  tags: tmux
  become: true
  make:
    chdir: ~{{user.name}}/Development/OSS/tmux
    target: install
# }}}
- name: Install tmuxinator # {{{
  tags: tmuxinator
  args:
    executable: /bin/bash
  shell: |
    source ~/.asdf/asdf.sh
    asdf reshim
    gem install tmuxinator
# }}}
- name: Install tmux config # {{{
  tags: [tmux, tmux-config]
  git:
    repo: git@github.com:jcmuller/my-tmux-config.git
    dest: ~/Development/MyStuff/my-tmux-config
    accept_hostkey: true
    update: true

- name: Symlink .tmux
  tags: [tmux, tmux-config]
  file:
    src: ~/Development/MyStuff/my-tmux-config/tmux
    dest: ~/.tmux
    state: link

- name: Symlink .tmux.conf
  tags: [tmux, tmux-config]
  file:
    src: ~/Development/MyStuff/my-tmux-config/tmux.conf
    dest: ~/.tmux.conf
    state: link
# }}}
- name: Install yakyak # {{{
  tags: [packages, desktop, yakyak]
  become: true
  apt:
    deb: "https://github.com/yakyak/yakyak/releases/download/v{{yakyak.version}}/yakyak-{{yakyak.version}}-linux-amd64.deb"
    state: present
# }}}
- name: Download & uncompress wtf # {{{
  tags: wtf
  unarchive:
    src: https://github.com/wtfutil/wtf/releases/download/v{{wtf.version}}/wtf_{{wtf.version}}_linux_amd64.tar.gz
    dest: /tmp/
    remote_src: true
    force: true
- name: Move
  tags: wtf
  become: true
  copy:
    src: /tmp/wtf_{{wtf.version}}_linux_amd64/wtfutil
    dest: /usr/local/bin/wtf
    mode: 0755
- name: Remove directory
  tags: wtf
  file:
    path: /tmp/wtf_{{wtf.version}}_linux_amd64
    state: absent
# }}}
- name: Install efm-langserver # {{{
  tags: efmlangserver
  unarchive:
    src: https://github.com/mattn/efm-langserver/releases/download/{{efmlangserver.version}}/efm-langserver_{{efmlangserver.version}}_linux_amd64.tar.gz
    dest: /tmp/
    remote_src: true
    force: true
- name: Move
  tags: efmlangserver
  become: true
  copy:
    src: /tmp/efm-langserver_{{efmlangserver.version}}_linux_amd64/efm-langserver
    dest: /usr/local/bin/efm-langserver
    mode: 0755
- name: Remove directory
  tags: efmlangserver
  file:
    path: /tmp/efm-langserver_{{efmlangserver.version}}_linux_amd64
    state: absent
# }}}
# Install Iosevka font {{{
- name: Ensure fonts dir exists
  tags: fonts
  file:
    dest: ~/.fonts/iosevka
    state: directory
    mode: 0755

- name: Install iosevka
  tags: fonts
  unarchive:
    src: https://github.com/be5invis/Iosevka/releases/download/v{{fonts.iosevka.version}}/pkg-iosevka-{{fonts.iosevka.version}}.zip
    dest: ~/.fonts/iosevka
    remote_src: true
    force: true

- name: Refresh font cache
  tags: fonts
  command: fc-cache -fv
# }}}
